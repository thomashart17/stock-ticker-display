import json
import os

DIRECTORY = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
TICKER_FILE = "tickers.json"


def generate_header(tickers):
    with open(os.path.join(DIRECTORY, "main", "tickers.h"), "w") as f:
        f.write("/* THIS IS AN AUTOGENERATED FILE. DO NOT MODIFY. */\n\n")
        f.write("#include <stdint.h>\n\n")
        f.write(f"const uint8_t TICKER_COUNT = {len(tickers)};\n\n")
        f.write("enum Ticker {\n")
        for i, ticker in enumerate(tickers):
            f.write(f"  {ticker} = {i},\n")
        f.write("};\n\n")
        f.write("const char * const getTicker(Ticker ticker);\n")


def generate_cpp(tickers):
    with open(os.path.join(DIRECTORY, "main", "tickers.cpp"), "w") as f:
        f.write("/* THIS IS AN AUTOGENERATED FILE. DO NOT MODIFY. */\n\n")
        f.write("#include <Arduino.h>\n\n")
        f.write("#include \"tickers.h\"\n\n")
        f.write("const char * const getTicker(Ticker ticker) {\n")
        f.write("  switch (ticker) {\n")
        for ticker in tickers:
            f.write(f"    case {ticker}:\n")
            f.write(f"      return \"{ticker}\";\n")
            f.write("    break;\n")
        f.write("    default:\n")
        f.write("      return NULL;\n")
        f.write("  };\n")
        f.write("}\n")


def main():
    tickers = []
    with open(TICKER_FILE, "r") as f:
        tickers = json.load(f)["tickers"]

    generate_header(tickers)
    generate_cpp(tickers)


if __name__ == "__main__":
    main()
